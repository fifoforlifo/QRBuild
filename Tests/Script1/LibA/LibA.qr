//@ include "env.qh";
//@ using assembly "QRBuild";
//@ using project  Common;

using System.Collections.Generic;
using System.IO;
using QRBuild;
using QRBuild.ProjectSystem;
using QRBuild.Translations.ToolChain.Msvc;

namespace Build
{
    [PrimaryProject(typeof(MainVariant))]
    public class LibA : Project
    {
        protected override void AddToGraph()
        {
            PublicIncludeDirs.Add(Path.GetDirectoryName(Locations.S.LibA));

            var cc_a = CompileOne("a.cpp");
            var cc_b = CompileOne("b.cpp");

            MsvcLibParams lp = new MsvcLibParams();
            lp.VcBinDir = Config.VcBinDir;
            lp.CompileDir = ProjectDir;
            // TODO: use Variant to decide output directory
            lp.BuildFileDir = ProjectDir + "\\built";
            lp.Inputs.Add(cc_a.Params.ObjectPath);
            lp.Inputs.Add(cc_b.Params.ObjectPath);
            lp.OutputFilePath = "liba.lib";
            var lib = new MsvcLib(ProjectManager.BuildGraph, lp);

            m_outputLib = lib.Params.OutputFilePath;
            DefaultTarget.Targets.Add(m_outputLib);
        }

        public override Target DefaultTarget
        {
            get
            {
                Target target = ProjectManager.GetOrCreateTarget(DefaultTargetName);
                return target;
            }
        }

        public string LibFilePath
        {
            get { return m_outputLib; }
        }

        public List<string> PublicIncludeDirs = new List<string>();

        // NOTE: this isn't a great pattern, but is concise for the caller
        private MsvcCompile CompileOne(string sourceFile)
        {
            // Create the params, and initialize them according
            // to a standard scheme.
            var ccp = new MsvcCompileParams();
            ccp.CompileDir = ProjectDir;
            // TODO: use Variant to decide output directory
            ccp.BuildFileDir = ProjectDir + "\\built";
            ccp.SourceFile = sourceFile;
            ccp.Compile = true;
            ccp.VcBinDir = Config.VcBinDir;
            // TODO: use Variant to decide architecture
            ccp.ToolChain = MsvcToolChain.ToolsX86TargetX86;
            ccp.EnableMinimalRebuild = true;
            ccp.DebugInfoFormat = MsvcDebugInfoFormat.Normal;

            // create the Translation to do the work
            var cc = new MsvcCompile(ProjectManager.BuildGraph, ccp);
            return cc;
        }

        private static readonly string DefaultTargetName = "liba";
        private string m_outputLib;
    }
}
